# üöÄ Script de d√©ploiement en production - Ibn Rochd (PowerShell)

Write-Host "==========================================" -ForegroundColor Cyan
Write-Host "üöÄ D√©ploiement Production - Ibn Rochd" -ForegroundColor Cyan
Write-Host "==========================================" -ForegroundColor Cyan
Write-Host ""

# Fonctions pour les messages color√©s
function Log-Info {
    param([string]$Message)
    Write-Host "‚ÑπÔ∏è $Message" -ForegroundColor Blue
}

function Log-Success {
    param([string]$Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

function Log-Warning {
    param([string]$Message)
    Write-Host "‚ö†Ô∏è $Message" -ForegroundColor Yellow
}

function Log-Error {
    param([string]$Message)
    Write-Host "‚ùå $Message" -ForegroundColor Red
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if (-not (Test-Path "artisan")) {
    Log-Error "Ce script doit √™tre ex√©cut√© depuis la racine du projet Laravel"
    exit 1
}

# √âtape 1: V√©rification Git
Log-Info "√âtape 1: V√©rification de l'√©tat Git"
git status
Write-Host ""

$gitStatus = git status --porcelain
if ($gitStatus) {
    Log-Warning "Il y a des modifications non commit√©es. Veuillez les commiter d'abord:"
    Write-Host $gitStatus
    exit 1
}

Log-Success "Git est propre"
Write-Host ""

# √âtape 2: Mise √† jour du code
Log-Info "√âtape 2: Mise √† jour du code"
git pull origin main
if ($LASTEXITCODE -ne 0) {
    Log-Error "Erreur lors du git pull"
    exit 1
}
Log-Success "Code √† jour"
Write-Host ""

# √âtape 3: Installation des d√©pendances PHP
Log-Info "√âtape 3: Installation des d√©pendances PHP"
composer install --optimize-autoloader --no-dev
if ($LASTEXITCODE -ne 0) {
    Log-Error "Erreur lors de la mise √† jour des d√©pendances PHP"
    exit 1
}
Log-Success "D√©pendances PHP install√©es"
Write-Host ""

# √âtape 4: Compilation des assets
Log-Info "√âtape 4: Compilation des assets frontend"
npm ci
npm run build
if ($LASTEXITCODE -ne 0) {
    Log-Error "Erreur lors de la compilation des assets"
    exit 1
}
Log-Success "Assets compil√©s"
Write-Host ""

# √âtape 5: Nettoyage des caches
Log-Info "√âtape 5: Nettoyage des caches"
php artisan cache:clear
php artisan view:clear
php artisan config:clear
php artisan route:clear
Log-Success "Caches nettoy√©s"
Write-Host ""

# √âtape 6: Ex√©cution des migrations
Log-Info "√âtape 6: Ex√©cution des migrations"
php artisan migrate --force
if ($LASTEXITCODE -ne 0) {
    Log-Warning "Certaines migrations ont pu √©chouer (c'est peut-√™tre normal)"
}
Log-Success "Migrations ex√©cut√©es"
Write-Host ""

# √âtape 7: Optimisation pour la production
Log-Info "√âtape 7: Optimisation pour la production"
php artisan optimize
php artisan config:cache
php artisan route:cache
php artisan view:cache
Log-Success "Optimisation compl√©t√©e"
Write-Host ""

# √âtape 8: V√©rification des logs
Log-Info "√âtape 8: V√©rification des logs"
if (Test-Path "storage/logs/laravel.log") {
    Log-Info "Derni√®res 10 lignes du log:"
    Get-Content "storage/logs/laravel.log" -Tail 10
} else {
    Log-Warning "Fichier log non trouv√©"
}
Write-Host ""

Log-Success "‚ú® D√©ploiement termin√© avec succ√®s!"
Write-Host ""
Write-Host "==========================================" -ForegroundColor Cyan
Write-Host "Prochaines √©tapes:" -ForegroundColor Cyan
Write-Host "1. Testez le site en production" -ForegroundColor White
Write-Host "2. V√©rifiez les logs si une erreur persiste" -ForegroundColor White
Write-Host "3. En cas de probl√®me, ex√©cutez: php artisan logs" -ForegroundColor White
Write-Host "==========================================" -ForegroundColor Cyan
