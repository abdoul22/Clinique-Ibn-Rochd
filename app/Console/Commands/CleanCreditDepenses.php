<?php

namespace App\Console\Commands;

use App\Models\Depense;
use App\Models\Credit;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Exception;

class CleanCreditDepenses extends Command
{
    protected $signature = 'clean:credit-depenses
                            {--dry-run : Afficher seulement les d√©penses sans les supprimer}
                            {--backup : Cr√©er une sauvegarde avant suppression}
                            {--force : Forcer la suppression sans confirmation}';

    protected $description = 'Nettoyer les d√©penses li√©es aux cr√©dits personnel';

    public function handle()
    {
        $this->info('üîí Nettoyage s√©curis√© des d√©penses de cr√©dits personnel');
        $this->line('==============================================================');

        // 1. ANALYSE DES DONN√âES
        $this->info('üìä ANALYSE DES DONN√âES :');

        $depensesPersonnel = Depense::where('mode_paiement_id', 'salaire')
            ->orWhere('nom', 'like', '%D√©duction salaire%')
            ->orWhere('nom', 'like', '%Cr√©dit personnel%')
            ->get();

        $this->info("D√©penses de cr√©dits personnel trouv√©es : {$depensesPersonnel->count()}");

        if ($depensesPersonnel->count() === 0) {
            $this->info('‚úÖ Aucune d√©pense de cr√©dit personnel √† nettoyer.');
            return 0;
        }

        // Afficher les d√©tails
        $this->line("\nüìã D√©tails des d√©penses :");
        $totalMontant = 0;
        foreach ($depensesPersonnel as $depense) {
            $this->line("   - ID: {$depense->id} | {$depense->nom} | {$depense->montant} MRU | {$depense->created_at}");
            $totalMontant += $depense->montant;
        }
        $this->info("   Total : {$totalMontant} MRU");

        // 2. SAUVEGARDE (si demand√©e)
        if ($this->option('backup')) {
            $this->line("\nüíæ SAUVEGARDE :");
            $backupFile = 'backup_credit_depenses_' . date('Y-m-d_H-i-s') . '.json';
            $backupData = [
                'date' => now()->toISOString(),
                'total_depenses' => $depensesPersonnel->count(),
                'total_montant' => $totalMontant,
                'depenses' => $depensesPersonnel->toArray()
            ];

            file_put_contents($backupFile, json_encode($backupData, JSON_PRETTY_PRINT));
            $this->info("‚úÖ Sauvegarde cr√©√©e : {$backupFile}");
        }

        // 3. DRY RUN
        if ($this->option('dry-run')) {
            $this->warn("\nüîç MODE DRY-RUN : Aucune suppression effectu√©e");
            $this->info("Pour effectuer la suppression, relancez sans --dry-run");
            return 0;
        }

        // 4. VALIDATION
        if (!$this->option('force')) {
            $this->line("\n‚ö†Ô∏è  VALIDATION :");
            if (!$this->confirm("Voulez-vous vraiment supprimer ces {$depensesPersonnel->count()} d√©penses ?")) {
                $this->warn('‚ùå Op√©ration annul√©e par l\'utilisateur.');
                return 0;
            }
        }

        // 5. SUPPRESSION
        $this->line("\nüóëÔ∏è  SUPPRESSION :");

        try {
            DB::beginTransaction();

            $deletedCount = 0;
            foreach ($depensesPersonnel as $depense) {
                $this->line("   - Suppression : {$depense->nom} ({$depense->montant} MRU)");
                $depense->delete();
                $deletedCount++;
            }

            DB::commit();

            $this->info("\n‚úÖ SUPPRESSION TERMIN√âE :");
            $this->info("   - {$deletedCount} d√©penses supprim√©es");
        } catch (Exception $e) {
            DB::rollBack();
            $this->error("\n‚ùå ERREUR LORS DE LA SUPPRESSION :");
            $this->error("   - Erreur : " . $e->getMessage());
            $this->error("   - Aucune donn√©e n'a √©t√© supprim√©e");
            return 1;
        }

        // 6. V√âRIFICATION
        $this->line("\nüîç V√âRIFICATION :");
        $remainingDepenses = Depense::where('mode_paiement_id', 'salaire')
            ->orWhere('nom', 'like', '%D√©duction salaire%')
            ->orWhere('nom', 'like', '%Cr√©dit personnel%')
            ->count();

        if ($remainingDepenses === 0) {
            $this->info("‚úÖ Aucune d√©pense de cr√©dit personnel restante.");
        } else {
            $this->warn("‚ö†Ô∏è  {$remainingDepenses} d√©penses de cr√©dit personnel restantes.");
        }

        $this->info("\n‚ú® Nettoyage termin√© avec succ√®s !");
        return 0;
    }
}
